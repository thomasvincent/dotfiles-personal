#!/usr/bin/env bash

# Core Environment Setup
export EDITOR='vim'
export LANG='en_US.UTF-8'
export LC_ALL='en_US.UTF-8'
export GPG_TTY=$(tty)
export LESS_TERMCAP_md="${yellow}"
export MANPAGER='less -X'
export BASH_SILENCE_DEPRECATION_WARNING=1

# History Configuration
export HISTSIZE='32768'
export HISTFILESIZE="${HISTSIZE}"
export HISTCONTROL='ignoreboth'

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Node.js Environment Setup
export NODE_REPL_HISTORY=~/.node_history
export NODE_REPL_HISTORY_SIZE='32768'
export NODE_REPL_MODE='sloppy'

# Python Environment Setup
command_exists pyenv && {
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
}

# Java Environment Setup
export JAVA_HOME=$(/usr/libexec/java_home)
export PATH="$PATH:$JAVA_HOME/bin"

# Ruby Environment Setup
export PATH="${PATH}:/usr/local/opt/ruby/bin"

# Go Environment Setup
export GOPATH="${HOME}/go"
export PATH="${PATH}:${GOPATH}/bin"

# Terraform Environment Setup
export TF_IN_AUTOMATION=1
export TF_LOG=DEBUG

# Check tool-specific settings
# Python Output Encoding
export PYTHONIOENCODING='UTF-8'

# Additional setup scripts
# Modularize complex settings into separate files
[ -f "$HOME/.config/shell/java_config.sh" ] && source "$HOME/.config/shell/java_config.sh"
[ -f "$HOME/.config/shell/python_config.sh" ] && source "$HOME/.config/shell/python_config.sh"
[ -f "$HOME/.config/shell/node_config.sh" ] && source "$HOME/.config/shell/node_config.sh"

