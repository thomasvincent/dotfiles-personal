#!/usr/bin/env bash

# This script contains utility functions for directory management, file operations,
# archiving, compression, networking, and other miscellaneous tasks.

# --- DIRECTORY & FILE MANAGEMENT ---

# Makes a directory and changes to it.
# Globals:
#   None
# Arguments:
#   Directory path
# Outputs:
#   Changes working directory
make_and_change_directory() {
  mkdir -p "$@" && cd "$@" || return 1
  echo "Changed to directory $PWD"
}

# Changes directory to the current Finder location.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Changes working directory
change_to_finder_directory() {
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')" || return 1
}

# Displays disk usage with an option to specify arguments.
# Globals:
#   None
# Arguments:
#   Optional arguments to pass to `du`
# Outputs:
#   Disk usage statistics
show_disk_usage() {
  local arg=${1:-"-sh"}  # Default to -sh unless specified
  shift  # Shift the arguments to exclude the first
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* ./*  # Exclude dotfiles
  fi
}

# Opens files or directories in the default application, or the current directory if no argument is given.
# Globals:
#   None
# Arguments:
#   Files or directories to open
# Outputs:
#   Opens file or directory
open_files() {
  if [ $# -eq 0 ]; then
    open .
  else
    open "$@"
  fi
}

# Displays directory tree excluding certain directories.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Displays directory tree in a paginated format
display_tree() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# --- ARCHIVING & COMPRESSION ---

# Creates a tar.gz archive, choosing the best available compression tool.
# Globals:
#   None
# Arguments:
#   Target directory or files
# Outputs:
#   Creates a compressed .tar.gz file
create_tar_gz() {
  local tmp_file="${@%/}.tar"
  tar -cvf "${tmp_file}" --exclude=".DS_Store" "$@" || return 1
  local size=$(stat -f "%z" "${tmp_file}" 2> /dev/null || stat -c "%s" "${tmp_file}")
  
  local cmd="gzip"  # Default to gzip
  if (( size < 52428800 )) && command -v zopfli >/dev/null; then cmd="zopfli";
  elif command -v pigz >/dev/null; then cmd="pigz"; fi

  echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`..."
  "$cmd" -v "${tmp_file}" || return 1
  rm "${tmp_file}"  # Remove temporary .tar
  local zipped_size=$(stat -f "%z" "${tmp_file}.gz" 2> /dev/null || stat -c "%s" "${tmp_file}.gz")
  echo "${tmp_file}.gz ($((zipped_size / 1000)) kB) created successfully."
}

# Compresses a file using gzip and displays original and compressed sizes.
# Globals:
#   None
# Arguments:
#   File to compress
# Outputs:
#   Displays original and compressed file sizes
gzip_compress_display() {
  local orig_size=$(wc -c < "$1")
  local gzip_size=$(gzip -c "$1" | wc -c)
  local ratio=$(echo "scale=2; $gzip_size * 100 / $orig_size" | bc) 
  printf "Original: %d bytes\nGzipped: %d bytes (%.2f%%)\n" "$orig_size" "$gzip_size" "$ratio"
}

# --- NETWORKING ---

# Starts a simple HTTP server and opens a browser to it.
# Globals:
#   None
# Arguments:
#   Optional port number (default 8000)
# Outputs:
#   Starts a server and opens a web browser
start_python_server() {
  local port="${1:-8000}"
  sleep 1 && open "http://localhost:${port}/" &
  python3 -m http.server "$port" --bind 127.0.0.1
}

# Starts a simple PHP server and opens a browser to it.
# Globals:
#   None
# Arguments:
#   Optional port number (default 4000)
# Outputs:
#   Starts a PHP server and opens a web browser
start_php_server() {
  local port="${1:-4000}"
  local ip=$(ipconfig getifaddr en1)
  sleep 1 && open "http://${ip}:${port}/" &
  php -S "${ip}:${port}"
}

# Performs a DNS lookup and formats the output.
# Globals:
#   None
# Arguments:
#   Domain to lookup
# Outputs:
#   DNS records
dns_lookup() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# --- OTHER ---

# Git-aware file comparison.
# Globals:
#   None
# Arguments:
#   Files to compare
# Outputs:
#   Differences between files
compare_files() {
  git diff --no-index --color-words "$@"
}

# Creates a data URL from a file.
# Globals:
#   None
# Arguments:
#   File to convert
# Outputs:
#   Data URL
create_data_url() {
  local mime_type=$(file -b --mime-type "$1")
  if [[ $mime_type == text/* ]]; then mime_type="${mime_type};charset=utf-8"; fi
  echo "data:${mime_type};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# --- ZSH SPECIFIC FUNCTIONS (Place in your .zshrc file) ---

# ... (All the Zsh-specific functions for Git Flow, GitOps, Terraform, Vault, Consul, Packer, and Nomad) ...
